#+title: Dasy Docs
#+options: toc: t
* Current Status
Dasy is currently in pre-alpha. The language's core is still being designed and implemented.
* Syntax
Dasy has a clojure-inspired lisp syntax with some influences from python. Some constructs are dasy-specific.
** Tuples
Tuples are signified by a quoted list such as ~'(1 2 3)~
The vyper equivalent is ~(1, 2, 3)~

* Core Macros
** ~defn~

~(defn fn-name args [return-type] visibility & body)~

This special form declares and defines a function within a smart contract.

The ~args~ list may be an empty list, but must be present. Returning multiple values requires declaring the return type as a tuple.

The ~return-type~ object is optional. If present, it may be a single keyword representing the return type, or it may be a tuple of keywords for returning multiple values.

The ~visibility~ object may also be a keyword or list of keywords. Valid values are:

- ~:external~
- ~:internal~
- ~:payable~
- ~:view~
- ~:pure~
- ~(nonreentrant "lock-name")~

#+begin_src clojure
(defn noArgs [] :external (pass))

(defn setNum [:uint256 x] :external (pass))

(defn addNums [:uint256 x y] :uint256 [:external :pure]
  (+ x y))

(defn addAndSub [:uint256 x y] '(:uint256 :uint256) [:external :pure]
  '((+ x y) (- x y)))
#+end_src
** ~defvar~
** ~/~

~(setv self/foo bar)~

Access object attributes. ~obj/name~ is shorthand for ~(. obj name)~
