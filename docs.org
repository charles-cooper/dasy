#+title: Dasy Docs
#+options: toc: t
* Current Status
Dasy is currently in pre-alpha. The language's core is still being designed and implemented.
* Syntax
Dasy has a clojure-inspired lisp syntax with some influences from python. Some constructs are dasy-specific.
** Tuples
Tuples are signified by a quoted list such as ~'(1 2 3)~
The vyper equivalent is ~(1, 2, 3)~

* API Reference
** ~defcontract~

~(defcontract name  [state-vars] & fns)~

This special form declares and defines a smart conctract. The state-vars declaration is optional.

If present, the ~state-vars~ declaration is a sequence of pairs enclosed in square brackets, mapping a name to a type. A type may be wrapped in a modifier such as ~public~, ~immutable~.

#+begin_src clojure
(defcontract example
  [pub_num (public :uint256)
   priv_num :uint256]
  (defn foo [:uint256 x] :uint256 :external
    (+ 7 (. self priv_num))))
#+end_src
** ~defn~

~(defn fn-name args return-type visibility & body)~

This special form declares and defines a function within a smart contract.

The args list may be an empty list, but must be present. Returning multiple values requires declaring the return type as a tuple.
