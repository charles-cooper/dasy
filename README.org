#+title: Dasy

#+begin_quote
The Dasypeltis, gansi, is considered an egg-eating snake. Their diet consists of all forms of eggs considering they have no teeth in which to eat living prey with.
#+end_quote

Dasy is a lisp built on top of [[https://github.com/vyperlang/vyper][vyper]]

it is parsed into a vyper AST to leverage all the optimizations of the vyper compiler
* Installation
For use as a library
#+begin_src bash
pip install dasy
#+end_src

For use as an executable
#+begin_src bash
pipx install dasy
#+end_src
* Example
In [[file:helloworld.dasy][hello_world.dasy]]
#+begin_src clojure
(defcontract hello_world
  (defn subUints [:uint256 x y] :uint256 :external
    (- x y)) ;; implicit return
  (defn addUints [:uint256 x y] :uint256 :external
    (+ x y)))
#+end_src

via [[https://github.com/z80dev/titanoboa][this fork of titanoboa]]
#+begin_src python
import boa

c = boa.load("hello_world.dasy")
print(c.addUints(10, 20)) # outputs 30
print(c.subUints(100, 20)) # outputs 80
#+end_src

Command line compilation
#+begin_src shell
> dasy hello_world.dasy
0x61004f61000f60003961004f6000f36003361161000c57610037565b60003560e01c3461003d5763c29855788118610035576004361861003d57600860405260206040f35b505b60006000fd5b600080fda165767970657283000306000b
#+end_src
* Motivation
** Macros
There's a lot of opportunities for macros in smart contracts. They could also be used as a proof of concept for features before implementing them at a lower level in the compiler.

While macros are not implemented yet, the goal is to be able to implement constructs like "while" using macros similarly to the following example from Common Lisp.

#+begin_src lisp
(defmacro while (condition &body body)
  `(loop while ,condition do (progn ,@body)))
#+end_src

The macro's inner body would be made up of a pre-initialized for-loop.
** For fun
